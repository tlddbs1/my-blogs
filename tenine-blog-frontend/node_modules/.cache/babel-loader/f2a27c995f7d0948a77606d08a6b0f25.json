{"ast":null,"code":"var _jsxFileName = \"D:\\\\Web_Root\\\\tenine\\\\tenine-blog-frontend\\\\src\\\\components\\\\editor\\\\Editorpane.js\";\nimport React, { Component } from 'react';\nimport './Editorpane.scss';\nimport CodeMirror from 'codemirror';\nimport 'codemirror/mode/markdown/markdown';\nimport 'codemirror/mode/javascript/javascript';\nimport 'codemirror/mode/jsx/jsx';\nimport 'codemirror/mode/css/css';\nimport 'codemirror/mode/shell/shell';\nimport 'codemirror/lib/codemirror.css';\nimport 'codemirror/theme/monokai.css';\n\nclass EditorPane extends Component {\n  constructor(...args) {\n    super(...args);\n    this.editor = null;\n    this.codeMirror = null;\n    this.cursor = null;\n\n    this.initializeEditor = () => {\n      this.codeMirror = CodeMirror(this.editor, {\n        mode: 'markdown',\n        theme: 'monokai',\n        lineNumbers: true,\n        lineWrapping: true\n      });\n      this.codeMirror.on('change', this.handleChangeMarkdown);\n    };\n\n    this.handleChange = e => {\n      const onChangeInput = this.props.onChangeInput;\n      const _e$target = e.target,\n            value = _e$target.value,\n            name = _e$target.name;\n      onChangeInput({\n        name,\n        value\n      });\n    };\n\n    this.handleChangeMarkdown = body => {\n      const onChangeInput = this.props.onChangeInput;\n      this.cursor = body.getCursor();\n      onChangeInput({\n        name: 'markdown',\n        value: body.getValue()\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.initializeEditor();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.markdown !== this.props.markdown) {\n      const codeMirror = this.codeMirror,\n            cursor = this.cursor;\n      if (!codeMirror) return;\n      codeMirror.setValue(this.props.markdown);\n      if (!cursor) return;\n      codeMirror.setCursor(cursor);\n    }\n  }\n\n  render() {\n    const title = this.props.title;\n    const handleChange = this.handleChange;\n    return React.createElement(\"div\", {\n      className: \"editor-pane\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      className: \"title\",\n      placeholder: \"\\uC81C\\uBAA9 \\uC785\\uB825\",\n      name: \"title\",\n      value: title,\n      onChange: handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"code-editor\",\n      ref: ref => this.editor = ref,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default EditorPane;","map":{"version":3,"sources":["D:\\Web_Root\\tenine\\tenine-blog-frontend\\src\\components\\editor\\Editorpane.js"],"names":["React","Component","CodeMirror","EditorPane","editor","codeMirror","cursor","initializeEditor","mode","theme","lineNumbers","lineWrapping","on","handleChangeMarkdown","handleChange","e","onChangeInput","props","target","value","name","body","getCursor","getValue","componentDidMount","componentDidUpdate","prevProps","prevState","markdown","setValue","setCursor","render","title","ref"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport './Editorpane.scss';\r\n\r\nimport CodeMirror from 'codemirror';\r\n\r\nimport 'codemirror/mode/markdown/markdown';\r\nimport 'codemirror/mode/javascript/javascript';\r\nimport 'codemirror/mode/jsx/jsx';\r\nimport 'codemirror/mode/css/css';\r\nimport 'codemirror/mode/shell/shell';\r\nimport 'codemirror/lib/codemirror.css';\r\nimport 'codemirror/theme/monokai.css';\r\n\r\nclass EditorPane extends Component {\r\n    editor = null;\r\n    codeMirror = null;\r\n    cursor = null;\r\n  \r\n    initializeEditor = () => {\r\n      this.codeMirror = CodeMirror(this.editor, {\r\n        mode: 'markdown',\r\n        theme: 'monokai',\r\n        lineNumbers: true,\r\n        lineWrapping: true\r\n      });\r\n      this.codeMirror.on('change', this.handleChangeMarkdown);\r\n    }\r\n  \r\n    componentDidMount() {\r\n      this.initializeEditor();\r\n    }\r\n  \r\n    handleChange = (e) => {\r\n      const { onChangeInput } = this.props;\r\n      const { value, name } = e.target;\r\n  \r\n      onChangeInput({ name, value });\r\n    }\r\n  \r\n    handleChangeMarkdown = (body) => {\r\n      const { onChangeInput } = this.props;\r\n  \r\n      this.cursor = body.getCursor();\r\n      onChangeInput({ name: 'markdown', value: body.getValue() });\r\n    }\r\n  \r\n    componentDidUpdate(prevProps, prevState) {\r\n      if (prevProps.markdown !== this.props.markdown) {\r\n        const { codeMirror, cursor } = this;\r\n  \r\n        if (!codeMirror) return;\r\n        codeMirror.setValue(this.props.markdown);\r\n  \r\n        if (!cursor) return;\r\n        codeMirror.setCursor(cursor);\r\n      }\r\n    }\r\n  \r\n    render() {\r\n      const { title } = this.props;\r\n      const { handleChange } = this;\r\n  \r\n      return (\r\n        <div className=\"editor-pane\">\r\n          <input className=\"title\" placeholder=\"제목 입력\" name=\"title\"\r\n            value={title} onChange={handleChange}\r\n          />\r\n          <div className=\"code-editor\" ref={ref => this.editor=ref}></div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  export default EditorPane;"]},"metadata":{},"sourceType":"module"}